#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PPORTS - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º GUI.
"""

import sys
import argparse
from typing import List
from core.port_scanner import PortScanner, ConnectionStatus
from core.process_manager import ProcessManager, TerminationResult


def format_port_info(port_info, show_details=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    status_emoji = {
        ConnectionStatus.LISTEN: "üü¢",
        ConnectionStatus.ESTABLISHED: "üîµ", 
        ConnectionStatus.TIME_WAIT: "üü°",
        ConnectionStatus.CLOSE_WAIT: "üü†",
    }
    
    emoji = status_emoji.get(port_info.status, "‚ö´")
    
    basic_info = (f"{emoji} {port_info.protocol}:{port_info.port} "
                 f"[{port_info.status.value}] - "
                 f"{port_info.process_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} "
                 f"(PID: {port_info.pid or 'N/A'})")
    
    if show_details and port_info.pid:
        details = (f"\n    –ê–¥—Ä–µ—Å: {port_info.local_addr}"
                  f"\n    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {port_info.process_username or 'N/A'}"
                  f"\n    –ö–æ–º–∞–Ω–¥–∞: {port_info.process_cmdline or 'N/A'}")
        return basic_info + details
    
    return basic_info


def cmd_scan_all(args):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤"""
    scanner = PortScanner()
    
    print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤...")
    ports = scanner.scan_all_ports()
    
    if not ports:
        print("‚ùå –ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {len(ports)}")
    
    if args.listening_only:
        ports = [p for p in ports if p.status == ConnectionStatus.LISTEN]
        print(f"üìä –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(ports)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
    tcp_ports = [p for p in ports if p.protocol == 'TCP']
    udp_ports = [p for p in ports if p.protocol == 'UDP']
    
    if tcp_ports:
        print(f"\nüî∑ TCP –ø–æ—Ä—Ç—ã ({len(tcp_ports)}):")
        for port in tcp_ports[:args.limit]:
            print(f"  {format_port_info(port, args.details)}")
        if len(tcp_ports) > args.limit:
            print(f"  ... –∏ –µ—â–µ {len(tcp_ports) - args.limit} –ø–æ—Ä—Ç–æ–≤")
    
    if udp_ports:
        print(f"\nüî∂ UDP –ø–æ—Ä—Ç—ã ({len(udp_ports)}):")
        for port in udp_ports[:args.limit]:
            print(f"  {format_port_info(port, args.details)}")
        if len(udp_ports) > args.limit:
            print(f"  ... –∏ –µ—â–µ {len(udp_ports) - args.limit} –ø–æ—Ä—Ç–æ–≤")


def cmd_scan_port(args):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
    scanner = PortScanner()
    
    print(f"üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç–µ {args.protocol.upper()}:{args.port}...")
    ports = scanner.find_port_by_number(args.port, args.protocol)
    
    if not ports:
        print(f"‚ùå –ü–æ—Ä—Ç {args.protocol.upper()}:{args.port} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(ports)}")
    for port in ports:
        print(f"  {format_port_info(port, True)}")


def cmd_scan_range(args):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤"""
    scanner = PortScanner()
    
    print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ {args.start}-{args.end} ({args.protocol.upper()})...")
    ports = scanner.scan_port_range(args.start, args.end, args.protocol)
    
    if not ports:
        print(f"‚ùå –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ {args.start}-{args.end} –∞–∫—Ç–∏–≤–Ω—ã—Ö {args.protocol.upper()} –ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {len(ports)}")
    for port in ports:
        print(f"  {format_port_info(port, args.details)}")


def cmd_terminate(args):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    manager = ProcessManager(allow_system_ports=args.allow_system)
    
    if args.pid:
        print(f"‚ö†Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {args.pid}...")
        if not args.force and not confirm_action(f"–∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID {args.pid}"):
            return
        
        result = manager.terminate_process_by_pid(args.pid, args.force)
        print_termination_result(result)
        
    elif args.port:
        protocol = args.protocol or 'tcp'
        print(f"‚ö†Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {protocol.upper()}:{args.port}...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        scanner = PortScanner()
        ports = scanner.find_port_by_number(args.port, protocol)
        
        if not ports:
            print(f"‚ùå –ü–æ—Ä—Ç {protocol.upper()}:{args.port} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            return
        
        print("–ë—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        for port in ports:
            if port.pid:
                protected = "üõ°Ô∏è" if manager.is_process_protected(port.pid) else "‚úÖ"
                print(f"  {protected} {port.process_name} (PID: {port.pid})")
        
        if not args.force and not confirm_action(f"–∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É {protocol.upper()}:{args.port}"):
            return
        
        results = manager.terminate_process_by_port(args.port, protocol, args.force)
        for result in results:
            print_termination_result(result)


def print_termination_result(result):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    emoji_map = {
        TerminationResult.SUCCESS: "‚úÖ",
        TerminationResult.NOT_FOUND: "‚ùå",
        TerminationResult.ACCESS_DENIED: "üîí",
        TerminationResult.TIMEOUT: "‚è∞",
        TerminationResult.SYSTEM_PROCESS: "üõ°Ô∏è",
        TerminationResult.ERROR: "üí•",
        TerminationResult.ALREADY_TERMINATED: "‚ò†Ô∏è"
    }
    
    emoji = emoji_map.get(result.result, "‚ùì")
    print(f"  {emoji} {result.message}")
    
    if result.duration > 0:
        print(f"    ‚è±Ô∏è  –í—Ä–µ–º—è: {result.duration:.2f}—Å")


def confirm_action(action_description):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    response = input(f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action_description}? (–¥–∞/–Ω–µ—Ç): ").lower()
    return response in ['–¥–∞', 'yes', 'y', '–¥']


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="PPORTS CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s scan --all                    # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
  %(prog)s scan --all --listening        # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º—ã–µ –ø–æ—Ä—Ç—ã
  %(prog)s scan --port 80                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç–µ 80
  %(prog)s scan --range 8000 9000        # –ü–æ—Ä—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 8000-9000
  %(prog)s kill --port 8080              # –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8080
  %(prog)s kill --pid 1234               # –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID 1234
  %(prog)s kill --port 22 --force        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å SSH
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ scan
    scan_parser = subparsers.add_parser('scan', help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤')
    scan_group = scan_parser.add_mutually_exclusive_group(required=True)
    scan_group.add_argument('--all', action='store_true', help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Ä—Ç—ã')
    scan_group.add_argument('--port', type=int, help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç')
    scan_group.add_argument('--range', nargs=2, type=int, metavar=('START', 'END'), help='–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤')
    
    scan_parser.add_argument('--protocol', choices=['tcp', 'udp'], default='tcp', help='–ü—Ä–æ—Ç–æ–∫–æ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: tcp)')
    scan_parser.add_argument('--listening', dest='listening_only', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º—ã–µ –ø–æ—Ä—Ç—ã')
    scan_parser.add_argument('--details', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    scan_parser.add_argument('--limit', type=int, default=20, help='–õ–∏–º–∏—Ç –≤—ã–≤–æ–¥–∏–º—ã—Ö –ø–æ—Ä—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)')
    
    # –ö–æ–º–∞–Ω–¥–∞ kill
    kill_parser = subparsers.add_parser('kill', help='–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    kill_group = kill_parser.add_mutually_exclusive_group(required=True)
    kill_group.add_argument('--pid', type=int, help='PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')
    kill_group.add_argument('--port', type=int, help='–ü–æ—Ä—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è')
    
    kill_parser.add_argument('--protocol', choices=['tcp', 'udp'], help='–ü—Ä–æ—Ç–æ–∫–æ–ª (–¥–ª—è --port)')
    kill_parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (SIGKILL)')
    kill_parser.add_argument('--allow-system', action='store_true', help='–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'scan':
            if args.all:
                cmd_scan_all(args)
            elif args.port:
                cmd_scan_port(args)
            elif args.range:
                args.start, args.end = args.range
                cmd_scan_range(args)
        
        elif args.command == 'kill':
            cmd_terminate(args)
            
    except KeyboardInterrupt:
        print("\n\n‚ö° –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 