#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ GUI –¥–ª—è PPORTS.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import customtkinter as ctk
import threading
import time
from typing import List, Optional
from core.port_scanner import PortScanner, PortInfo, ConnectionStatus
from core.process_manager import ProcessManager, TerminationResult


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CustomTkinter
ctk.set_appearance_mode("system")  # "light", "dark", "system"
ctk.set_default_color_theme("blue")  # "blue", "green", "dark-blue"


class PortListFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Ä—Ç–æ–≤"""
    
    def __init__(self, master, **kwargs):
        super().__init__(master, **kwargs)
        self.setup_ui()
        self.ports_data: List[PortInfo] = []
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ñ—Ä–µ–π–º–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self, 
            text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ü–æ—Ä—Ç—ã", 
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.title_label.pack(pady=(10, 5))
        
        # –§—Ä–µ–π–º —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        self.filter_frame = ctk.CTkFrame(self)
        self.filter_frame.pack(fill="x", padx=10, pady=5)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É
        self.protocol_label = ctk.CTkLabel(self.filter_frame, text="–ü—Ä–æ—Ç–æ–∫–æ–ª:")
        self.protocol_label.pack(side="left", padx=(10, 5))
        
        self.protocol_var = tk.StringVar(value="–í—Å–µ")
        self.protocol_combo = ctk.CTkComboBox(
            self.filter_frame,
            values=["–í—Å–µ", "TCP", "UDP"],
            variable=self.protocol_var,
            command=self.on_filter_change
        )
        self.protocol_combo.pack(side="left", padx=5)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        self.status_label = ctk.CTkLabel(self.filter_frame, text="–°—Ç–∞—Ç—É—Å:")
        self.status_label.pack(side="left", padx=(20, 5))
        
        self.status_var = tk.StringVar(value="–í—Å–µ")
        self.status_combo = ctk.CTkComboBox(
            self.filter_frame,
            values=["–í—Å–µ", "LISTEN", "ESTABLISHED", "TIME_WAIT"],
            variable=self.status_var,
            command=self.on_filter_change
        )
        self.status_combo.pack(side="left", padx=5)
        
        # –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Ä—Ç—É
        self.search_label = ctk.CTkLabel(self.filter_frame, text="–ü–æ—Ä—Ç:")
        self.search_label.pack(side="left", padx=(20, 5))
        
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.on_search_change)
        self.search_entry = ctk.CTkEntry(
            self.filter_frame,
            textvariable=self.search_var,
            placeholder_text="–ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞",
            width=100
        )
        self.search_entry.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_btn = ctk.CTkButton(
            self.filter_frame,
            text="üîÑ",
            width=40,
            command=self.refresh_ports
        )
        self.refresh_btn.pack(side="right", padx=10)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ (Treeview)
        self.setup_treeview()
        
    def setup_treeview(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Ä—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        self.tree_frame = ctk.CTkFrame(self)
        self.tree_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview
        columns = ("Port", "Protocol", "Status", "Process", "PID", "User")
        self.tree = ttk.Treeview(self.tree_frame, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.tree.heading("Port", text="–ü–æ—Ä—Ç")
        self.tree.heading("Protocol", text="–ü—Ä–æ—Ç–æ–∫–æ–ª")
        self.tree.heading("Status", text="–°—Ç–∞—Ç—É—Å")
        self.tree.heading("Process", text="–ü—Ä–æ—Ü–µ—Å—Å")
        self.tree.heading("PID", text="PID")
        self.tree.heading("User", text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.tree.column("Port", width=80)
        self.tree.column("Protocol", width=80)
        self.tree.column("Status", width=100)
        self.tree.column("Process", width=200)
        self.tree.column("PID", width=80)
        self.tree.column("User", width=120)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(self.tree_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–≥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        self.tree.tag_configure("LISTEN", foreground="green")
        self.tree.tag_configure("ESTABLISHED", foreground="blue")
        self.tree.tag_configure("TIME_WAIT", foreground="orange")
        self.tree.tag_configure("CLOSE_WAIT", foreground="red")
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind("<Double-1>", self.on_item_double_click)
        self.tree.bind("<Button-3>", self.on_right_click)  # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.create_context_menu()
        
    def create_context_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", command=self.show_details)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", command=self.terminate_process)
        self.context_menu.add_command(label="üí• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å", command=self.force_terminate_process)
        
    def on_filter_change(self, value=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.apply_filters()
        
    def on_search_change(self, *args):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        self.apply_filters()
        
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É –ø–æ—Ä—Ç–æ–≤"""
        if not self.ports_data:
            return
            
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        filtered_ports = self.ports_data.copy()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É
        protocol_filter = self.protocol_var.get()
        if protocol_filter != "–í—Å–µ":
            filtered_ports = [p for p in filtered_ports if p.protocol == protocol_filter]
            
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_filter = self.status_var.get()
        if status_filter != "–í—Å–µ":
            filtered_ports = [p for p in filtered_ports if p.status.value == status_filter]
            
        # –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Ä—Ç—É
        search_text = self.search_var.get().strip()
        if search_text:
            try:
                port_number = int(search_text)
                filtered_ports = [p for p in filtered_ports if p.port == port_number]
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –∏—â–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
                filtered_ports = [p for p in filtered_ports 
                                if search_text.lower() in (p.process_name or "").lower()]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.populate_tree(filtered_ports)
        
    def populate_tree(self, ports: List[PortInfo]):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—Ä—Ç–∞—Ö"""
        for port in ports:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_colors = {
                ConnectionStatus.LISTEN: "green",
                ConnectionStatus.ESTABLISHED: "blue",
                ConnectionStatus.TIME_WAIT: "orange",
                ConnectionStatus.CLOSE_WAIT: "red"
            }
            
            item = self.tree.insert("", "end", values=(
                port.port,
                port.protocol,
                port.status.value,
                port.process_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                port.pid or "N/A",
                port.process_username or "N/A"
            ))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            if port.status in status_colors:
                self.tree.item(item, tags=(port.status.value,))
        
    def refresh_ports(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.refresh_btn.configure(state="disabled", text="‚è≥")
        
        def scan_thread():
            try:
                scanner = PortScanner()
                self.ports_data = scanner.scan_all_ports()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.after(0, self.on_scan_complete)
            except Exception as e:
                self.after(0, lambda: self.on_scan_error(str(e)))
                
        threading.Thread(target=scan_thread, daemon=True).start()
        
    def on_scan_complete(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.refresh_btn.configure(state="normal", text="üîÑ")
        self.apply_filters()
        
    def on_scan_error(self, error_message):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.refresh_btn.configure(state="normal", text="üîÑ")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Ä—Ç–æ–≤:\n{error_message}")
        
    def get_selected_port(self) -> Optional[PortInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç–µ"""
        selection = self.tree.selection()
        if not selection:
            return None
            
        item = selection[0]
        port_number = int(self.tree.item(item)["values"][0])
        protocol = self.tree.item(item)["values"][1]
        
        # –ò—â–µ–º –≤ –¥–∞–Ω–Ω—ã—Ö
        for port in self.ports_data:
            if port.port == port_number and port.protocol == protocol:
                return port
        return None
        
    def on_item_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        self.show_details()
        
    def on_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞"""
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)
            
    def show_details(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–µ"""
        port = self.get_selected_port()
        if not port:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π")
            return
            
        details = f"""
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç–µ

üîå –ü–æ—Ä—Ç: {port.protocol}:{port.port}
üìä –°—Ç–∞—Ç—É—Å: {port.status.value}
üè† –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {port.local_addr}
üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {port.remote_addr or 'N/A'}

üîß –ü—Ä–æ—Ü–µ—Å—Å: {port.process_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî PID: {port.pid or 'N/A'}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {port.process_username or 'N/A'}
üìÅ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {port.process_exe or 'N/A'}
‚ö° –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {port.process_cmdline or 'N/A'}
        """.strip()
        
        messagebox.showinfo("–î–µ—Ç–∞–ª–∏ –ø–æ—Ä—Ç–∞", details)
        
    def terminate_process(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å (–º—è–≥–∫–æ)"""
        self._terminate_process(force=False)
        
    def force_terminate_process(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å"""
        self._terminate_process(force=True)
        
    def _terminate_process(self, force=False):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        port = self.get_selected_port()
        if not port:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return
            
        if not port.pid:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å PID –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        action = "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å" if force else "–∑–∞–≤–µ—Ä—à–∏—Ç—å"
        if not messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action} –ø—Ä–æ—Ü–µ—Å—Å?\n\n"
            f"–ü—Ä–æ—Ü–µ—Å—Å: {port.process_name}\n"
            f"PID: {port.pid}\n"
            f"–ü–æ—Ä—Ç: {port.protocol}:{port.port}"
        ):
            return
            
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def terminate_thread():
            try:
                manager = ProcessManager()
                result = manager.terminate_process_by_pid(port.pid, force)
                self.after(0, lambda: self.on_terminate_complete(result))
            except Exception as e:
                self.after(0, lambda: self.on_terminate_error(str(e)))
                
        threading.Thread(target=terminate_thread, daemon=True).start()
        
    def on_terminate_complete(self, result):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if result.result == TerminationResult.SUCCESS:
            messagebox.showinfo("–£—Å–ø–µ—Ö", result.message)
            self.refresh_ports()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", result.message)
            
    def on_terminate_error(self, error_message):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:\n{error_message}")


class MainWindow(ctk.CTk):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PPORTS"""
    
    def __init__(self):
        super().__init__()
        
        self.title("PPORTS - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ—Ä—Ç–∞–º–∏")
        self.geometry("1000x700")
        
        # –ò–∫–æ–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            self.iconbitmap("assets/icon.ico")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç
            
        self.setup_ui()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.after(1000, self.initial_scan)
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header_frame = ctk.CTkFrame(self)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üöÄ PPORTS - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ—Ä—Ç–∞–º–∏ –∏ –ü—Ä–æ—Ü–µ—Å—Å–∞–º–∏",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=10)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.port_list_frame = PortListFrame(self)
        self.port_list_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = ctk.CTkFrame(self)
        self.status_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            text="üîÑ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(side="left", padx=10, pady=5)
        
        self.count_label = ctk.CTkLabel(
            self.status_frame,
            text="–ü–æ—Ä—Ç–æ–≤: 0",
            font=ctk.CTkFont(size=12)
        )
        self.count_label.pack(side="right", padx=10, pady=5)
        
    def initial_scan(self):
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.status_label.configure(text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤...")
        self.port_list_frame.refresh_ports()
        
    def update_status(self, message: str, port_count: int = 0):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        self.status_label.configure(text=message)
        self.count_label.configure(text=f"–ü–æ—Ä—Ç–æ–≤: {port_count}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GUI"""
    app = MainWindow()
    app.mainloop()


if __name__ == "__main__":
    main() 